"use client";

import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { FileText, Copy, CheckCircle, Edit3 } from "lucide-react";

interface PolicyContent {
  title: string;
  companyName: string;
  effectiveDate: string;
  institutionType: string;
  employeeCount?: string;
  assets?: string;
  nextReviewDate: string;
  sections: Array<{
    number: string;
    title: string;
    content?: string;
    items?: string[];
  }>;
}

interface PolicyViewerProps {
  policy: PolicyContent;
  companyName: string;
  selectedPolicyName: string;
  onEdit: () => void;
  onApprove: () => void;
  onReset: () => void;
  isPreviewMode: boolean;
}

const PolicyViewer: React.FC<PolicyViewerProps> = ({
  policy,
  companyName,
  selectedPolicyName,
  onEdit,
  onApprove,
  onReset,
  isPreviewMode,
}) => {
  const [copied, setCopied] = useState(false);

  const convertPolicyToText = (policy: PolicyContent) => {
    if (!policy) return "";

    let text = `${policy.title}\n${policy.companyName}\n\n`;
    text += `Effective Date: ${policy.effectiveDate}\n`;
    text += `Institution Type: ${policy.institutionType}\n`;
    if (policy.employeeCount) text += `Employee Count: ${policy.employeeCount}\n`;
    if (policy.assets) text += `Total Assets: ${policy.assets}\n\n`;

    policy.sections.forEach((section) => {
      text += `${section.number}. ${section.title}\n`;
      if (section.content) {
        text += `${section.content}\n\n`;
      }
      if (section.items) {
        section.items.forEach((item: string) => {
          text += `- ${item}\n`;
        });
        text += "\n";
      }
    });

    return text;
  };

  const copyToClipboard = async () => {
    const textContent = convertPolicyToText(policy);
    await navigator.clipboard.writeText(textContent);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  const renderPolicyContent = (policy: PolicyContent) => {
    if (!policy) return null;

    return (
      <div className="bg-white">
        {/* Policy Header */}
        <div className="text-center border-b-4 border-blue-600 pb-6 mb-8">
          <h1 className="text-3xl font-bold text-blue-600 mb-2">{companyName}</h1>
          <h2 className="text-2xl font-semibold text-gray-900 mb-4">{policy.title}</h2>
          <div className="bg-gray-50 rounded-lg p-4 inline-block">
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <strong>Effective Date:</strong> {policy.effectiveDate}
              </div>
              <div>
                <strong>Institution Type:</strong> {policy.institutionType}
              </div>
              {policy.employeeCount && (
                <div>
                  <strong>Employee Count:</strong> {policy.employeeCount}
                </div>
              )}
              {policy.assets && (
                <div>
                  <strong>Total Assets:</strong> {policy.assets}
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Policy Sections */}
        <div className="space-y-8">
          {policy.sections.map((section: any, index: number) => (
            <div key={index} className="border-l-4 border-blue-200 pl-6">
              <h3 className="text-xl font-bold text-blue-600 mb-3">
                {section.number}. {section.title}
              </h3>
              {section.content && (
                <div className="text-gray-700 mb-4 leading-relaxed">
                  {section.content.split("\n").map((paragraph: string, pIndex: number) => (
                    <p key={pIndex} className="mb-3">
                      {paragraph}
                    </p>
                  ))}
                </div>
              )}
              {section.items && (
                <ul className="list-disc list-inside space-y-2 text-gray-700 ml-4">
                  {section.items.map((item: string, itemIndex: number) => (
                    <li key={itemIndex}>{item}</li>
                  ))}
                </ul>
              )}
            </div>
          ))}
        </div>

        {/* Footer */}
        <div className="mt-12 pt-8 border-t border-gray-200 text-center text-sm text-gray-500">
          <p>Next Review Date: {policy.nextReviewDate}</p>
          <p className="mt-2">Generated by RiskShield AI Policy Generator</p>
        </div>
      </div>
    );
  };

  return (
    <Card className="border border-gray-200">
      <CardHeader>
        <div className="flex items-center justify-between">
          <div>
            <CardTitle className="flex items-center space-x-2">
              <FileText className="h-5 w-5 text-blue-600" />
              <span>
                {selectedPolicyName} - {companyName}
              </span>
            </CardTitle>
            <CardDescription>
              Generated on {new Date().toLocaleDateString()} • Ready for review
            </CardDescription>
          </div>
          <div className="flex space-x-2">
            <Button variant="outline" size="sm" onClick={copyToClipboard} disabled={isPreviewMode}>
              {copied ? (
                <>
                  <CheckCircle className="mr-2 h-4 w-4 text-green-500" />
                  Copied!
                </>
              ) : (
                <>
                  <Copy className="mr-2 h-4 w-4" />
                  Copy
                </>
              )}
            </Button>
            <Button variant="outline" size="sm" onClick={onEdit} disabled={isPreviewMode}>
              <Edit3 className="mr-2 h-4 w-4" />
              Edit
            </Button>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <div className="bg-gray-50 rounded-lg p-8 max-h-96 overflow-y-auto mb-6">
          {renderPolicyContent(policy)}
        </div>
        <div className="bg-amber-50 border border-amber-200 rounded-lg p-3 mb-6">
          <p className="text-sm text-amber-800 text-center">
            ⚠️ RiskShield AI may make mistakes. Please use with discretion.
          </p>
        </div>
        <div className="flex justify-between">
          <Button variant="outline" onClick={onReset}>
            Start Over
          </Button>
          <Button onClick={onApprove} className="bg-blue-600 hover:bg-blue-700 text-white" disabled={isPreviewMode}>
            Approve Policy
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};

export default PolicyViewer;